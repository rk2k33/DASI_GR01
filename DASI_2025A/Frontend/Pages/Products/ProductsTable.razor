@attribute [Authorize(Roles = "Superadmin, Admin")]
@page "/Productos"
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject IProductService _productService
@inject SweetAlertService _sw

<PageTitle>Gestionar Productos</PageTitle>

<div class="space-y-4 w-full">
  <BodyHeader title="Gestionar Productos" />

  <section class="w-full flex justify-between items-center px-4">
    <h1 class="text-4xl font-bold text-[#427500]">Productos</h1>
    <div class="flex gap-4">
      <NavLink href="/Productos/Crear"
        class="hover:bg-green-600 bg-green-800  text-white text-lg font-bold px-4 py-2 rounded-full w-10 h-10 flex justify-center items-center transition duration-300 cursor-pointer">
        <i class="fa-solid fa-plus"></i>
      </NavLink>
    </div>
  </section>

  @if (products == null && string.IsNullOrEmpty(errorMessage))
  {
    <h1 class="text-sm font-bold text-[#427500]">Cargando...</h1>
  }
  else if (!string.IsNullOrEmpty(errorMessage))
  {
    <h1 class="text-sm font-bold text-[#427500]">@errorMessage</h1>
  }
  else
  {
    <section>
      <div class="p-2">
        <div class="flex justify-end w-full px-6 py-2">
          <nav class="inline-flex space-x-1">
            <button @onclick="() => GoToPage(currentPage - 1)"
              class="w-7 h-7 rounded-full font-bold text-black flex justify-center items-center hover:bg-green-800/70 hover:text-white cursor-pointer transition duration-300"
              disabled="@(@currentPage == 1)"><i class="fa-solid fa-chevron-left"></i></button>

            @for (int i = 1; i <= totalPages; i++)
            {
              <button @onclick="() => GoToPage(i)"
                class="w-7 h-7 font-bold text-center rounded-full @(i == currentPage ? "bg-blue-500/80 text-white" : "bg-white hover:bg-gray-300/80 cursor-pointer") text-xs">
                @i
              </button>
            }

            <button @onclick="() => GoToPage(currentPage + 1)"
              class="w-7 h-7 rounded-full font-bold text-black flex justify-center items-center hover:bg-green-800/70 hover:text-white cursor-pointer transition duration-300"
              disabled="@(@currentPage == totalPages)"><i class="fa-solid fa-chevron-right"></i></button>
          </nav>
        </div>
        <!-- Vista de tabla pantallas grandes -->
        <div class="hidden md:block overflow-x-auto rounded-lg shadow-2xl">
          <table class="w-full">
            <thead class="bg-gray-200 font-bold">
              @{
                var headers = new List<string> { "Producto", "Descripci贸n", "Precio", "Stock", "Imagen", "Tipo",
                        "Acciones"};
              }
              <tr>
                <th class="w-5">#</th>
                @foreach (var header in headers)
                {
                  <th class="px-6 py-3 text-left text-sm uppercase tracking-wider">@header</th>
                }
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              @foreach (var (product, index) in PagedProducts.Select((p, i) => (p, i)))
              {

                <tr class="@(product.Active ? "hover:bg-gray-50" : "bg-red-50") transition-colors duration-150">
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@((currentPage - 1) * pageSize + index + 1)
                  </td>
                  <td class="px-6 py-4 whitespace-normal break-words text-sm text-gray-900">@product.Name</td>
                  <td class="px-6 py-4 whitespace-normal break-words text-sm text-gray-500">@product.Description</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">$@product.Price.ToString("0.00")</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm @(product.Stock == 0 ? "text-red-500" : "text-gray-500")">
                    @product.Stock
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <img src="@product.Image" alt="@product.Name" class="w-12 h-12">
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@product.Type</td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <NavLink href=@{
                    $"/Productos/Editar/{product.Id}"
                                  }
                    class="hover:bg-blue-600 bg-blue-500 text-white text-sm font-bold px-3 py-2 rounded-lg transition duration-300 cursor-pointer">
                    <i class="fa-solid fa-pen-to-square"></i>
                  </NavLink>
                  <button @onclick="() => OnDeleteProduct(product.Id)"
                    class="hover:bg-red-600 bg-red-500 text-white text-sm font-bold px-3 py-2 rounded-lg transition duration-300 cursor-pointer">
                    <i class="fa-solid fa-trash"></i>
                  </button>
                </td>
              </tr>
            }
          </tbody>
        </table>
      </div>
      <!-- Vista de tarjetas para m贸vil -->
      <div class="block md:hidden space-y-4 px-4">
        @foreach (var (product, index) in PagedProducts.Select((p, i) => (p, i)))
        {
          <div class="@(product.Active ? "bg-white" : "bg-red-50") rounded-lg shadow-md border border-gray-200 p-4">
            <!-- Header con imagen y nombre -->
            <div class="flex items-start gap-3 mb-3">
              <img src="@product.Image" alt="@product.Name" class="w-16 h-16 rounded-lg object-cover">
              <div class="flex-1">
                <h3 class="font-bold text-gray-900 text-lg">@product.Name</h3>
                <span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">@product.Type</span>
              </div>
            </div>

            <!-- Descripci贸n -->
            <p class="text-gray-600 text-sm mb-3 line-clamp-2">@product.Description</p>

            <!-- Informaci贸n -->
            <div class="grid grid-cols-2 gap-2 mb-4">
              <div class="text-center bg-gray-50 rounded-lg p-2">
                <div class="text-lg font-bold text-green-600">$@product.Price.ToString("0.00")</div>
                <div class="text-xs text-gray-500">Precio</div>
              </div>
              <div class="text-center bg-gray-50 rounded-lg p-2">
                <div class="text-lg font-bold @(product.Stock == 0 ? "text-red-500" : "text-gray-900")">@product.Stock
                </div>
                <div class="text-xs text-gray-500">Stock</div>
              </div>
            </div>

            <!-- Acciones -->
            <div class="flex gap-2 justify-end">
              <NavLink href=@{
              $"/Productos/Editar/{product.Id}"
                        }
              class="bg-blue-500 hover:bg-blue-600 text-white text-sm font-bold px-3 py-2 rounded-lg transition duration-300">
              <i class="fa-solid fa-pen-to-square"></i>
            </NavLink>
            <button @onclick="() => OnDeleteProduct(product.Id)"
              class="bg-red-500 hover:bg-red-600 text-white text-sm font-bold px-3 py-2 rounded-lg transition duration-300">
              <i class="fa-solid fa-trash"></i>
            </button>
          </div>
        </div>
                }
      </div>
    </div>
  </section>
    }
</div>

@code
{
  private IEnumerable<ProductDto>? products;
  private string? errorMessage;
  private string? serverMessage;
  private int currentPage = 1;
  private int pageSize = 5;
  private int totalPages = 1;
  private IEnumerable<ProductDto> PagedProducts =>
  products?.Skip((currentPage - 1) * pageSize).Take(pageSize) ?? Enumerable.Empty<ProductDto>();

  protected override async Task OnInitializedAsync()
  {
    var response = await _productService.GetAllProductsAsync();

    if (response.data is null)
    {
      errorMessage = response.message;
    }
    else
    {
      products = response.data.Where(p => p.Active).ToList();
      totalPages = (int)Math.Ceiling((double)products.Count() / pageSize);
    }
  }

  private async Task OnDeleteProduct(int id)
  {
    var response = await _productService.DeleteProductAsync(id);
    serverMessage = response.message;
    if (!response.data)
    {
      await _sw.FireAsync("Error", serverMessage, SweetAlertIcon.Error);
      return;
    }
    await _sw.FireAsync("Success", serverMessage, SweetAlertIcon.Success);
    await OnInitializedAsync();
  }

  private void GoToPage(int page)
  {
    if (page < 1 || page > totalPages) return;
    currentPage = page;
  }

}