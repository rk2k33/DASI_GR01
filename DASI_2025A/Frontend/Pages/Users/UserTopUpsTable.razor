@attribute [Authorize(Roles = "Superadmin")]
@page "/Usuarios/Recargas"
@using System.Security.Claims;
@using System.Text.Json;
@inject NavigationManager Nav
@inject SweetAlertService _sw
@inject IUsersService _userService
@inject ILocalStorageService _localStorage

<PageTitle>Administrar Recargas | SS.CC. Rumipamba</PageTitle>

<div class="space-y-4 w-full">
  <BodyHeader title="Administrar Recargas" />

  <section class="w-full flex justify-between items-center px-4">
    <h1 class="text-4xl font-bold text-[#427500]">Administrar Recargas</h1>
  </section>

  @if (topUps == null && string.IsNullOrEmpty(errorMessage))
  {
    <h1 class="text-sm font-bold text-[#427500]">Cargando...</h1>
  }

  else
  {
    <section>
      <div class="p-2">
        <FilterContainer @ref="filterContainerRef">
          <h3 class="block md:hidden text-2xl font-bold text-[#427500]"><strong>Filtrar Usuarios</strong></h3>
          <div class="grid grid-cols-1 space-y-5 md:grid-cols-4 gap-4">
            <FloatingLabelInput Label="Usuario" Name="usuario" Type="text" LabelColor="blue" value="@filtroUsuario"
              OnChange="(e) => filtroUsuario = e.Value?.ToString()" />
            <FloatingLabelInput Label="Autorizado por" Name="autorizado" Type="text" LabelColor="blue"
              value="@filtroAutorizado" OnChange="(e) => filtroAutorizado = e.Value?.ToString()" />
            <FloatingLabelSelect Label="Estado" Name="estado" LabelColor="blue" SelectedValue="@filtroEstado"
              SelectedValueChanged="(value) => filtroEstado = value" Placeholder="Estado">
              <option value=""></option>
              <option value="PENDIENTE">PENDIENTE</option>
              <option value="APROBADO">APROBADO</option>
              <option value="RECHAZADO">RECHAZADO</option>
            </FloatingLabelSelect>
            <FloatingLabelSelect Label="Tipo" Name="Type" LabelColor="blue" SelectedValue="@filtroTipo"
              SelectedValueChanged="(value) => filtroTipo = value" Placeholder="Estado">
              <option value=""></option>
              <option value="Efectivo">Efectivo</option>
              <option value="Transferencia">Transferencia</option>
              <option value="PayPal">PayPal</option>
            </FloatingLabelSelect>
            <FloatingLabelInput Label="Desde" Name="start" Type="date" LabelColor="blue"
              value="@(filtroFechaInicio?.ToString("yyyy-MM-dd"))"
              OnChange="(e) => filtroFechaInicio = string.IsNullOrWhiteSpace(e.Value?.ToString()) ? null : DateTime.Parse(e.Value!.ToString()!)" />
            <FloatingLabelInput Label="Hasta" Name="end" Type="date" LabelColor="blue"
              value="@(filtroFechaFin?.ToString("yyyy-MM-dd"))"
              OnChange="(e) => filtroFechaFin = string.IsNullOrWhiteSpace(e.Value?.ToString()) ? null : DateTime.Parse(e.Value!.ToString()!)" />
          </div>
          <div class="flex justify-end md:justify-start gap-2 mt-4">
            <button class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded cursor-pointer"
              @onclick="async () => { currentPage = 1; await LoadTopUpsAsync(); filterContainerRef?.CerrarModal(); }">
              Buscar
            </button>
            <button class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded cursor-pointer"
              @onclick="async () => { await LimpiarFiltros(); filterContainerRef?.CerrarModal(); }">
              Limpiar
            </button>
          </div>
        </FilterContainer>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
          <h1 class="text-sm font-bold text-[#427500]">@errorMessage</h1>
        }
        else
        {
          <div class="flex justify-end w-full px-6 py-2">
            <nav class="inline-flex space-x-1">
              <button @onclick="() => GoToPage(currentPage - 1)"
                class="w-7 h-7 rounded-full font-bold text-black flex justify-center items-center hover:bg-green-800/70 hover:text-white cursor-pointer transition duration-300"
                disabled="@(@currentPage == 1)"><i class="fa-solid fa-chevron-left"></i></button>

              @for (int i = 1; i <= totalPages; i++)
              {
                <button @onclick="() => GoToPage(i)"
                  class="w-7 h-7 font-bold text-center rounded-full @(i == currentPage ? "bg-blue-500/80 text-white" : "bg-white hover:bg-gray-300/80 cursor-pointer") text-xs">
                  @i
                </button>
              }

              <button @onclick="() => GoToPage(currentPage + 1)"
                class="w-7 h-7 rounded-full font-bold text-black flex justify-center items-center hover:bg-green-800/70 hover:text-white cursor-pointer transition duration-300"
                disabled="@(@currentPage == totalPages)"><i class="fa-solid fa-chevron-right"></i></button>
            </nav>
          </div>
          <!-- Vista de tablas pantallas grandes -->
          <div class="hidden md:block overflow-x-auto rounded-lg shadow-2xl">
            <table class="w-full">
              <thead class="bg-gray-200 font-bold">
                @{
                  var headers = new List<string> {"Usuario", "Creado por", "Aprobado por", "Tipo","Monto", "Status", "Fecha",
                        "Comprobante",
                        "Acciones"};
                }
                <tr>
                  <th class="w-5">#</th>
                  @foreach (var header in headers)
                  {
                    <th class="px-6 py-3 text-left text-sm uppercase tracking-wider">@header</th>
                  }
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                @foreach (var (topUp, index) in topUps!.Select((p, i) => (p, i)))
                {
                  <tr class="hover:bg-gray-50 transition-colors duration-150">
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@((currentPage - 1) * pageSize + index + 1)
                    </td>
                    <td class="px-6 py-4 whitespace-normal break-words text-sm text-gray-900">@topUp.TargetUser</td>
                    <td class="px-6 py-4 whitespace-normal break-words text-sm text-gray-900">@topUp.RequestedByUser</td>
                    <td class="px-6 py-4 whitespace-normal break-words text-sm text-gray-900">@(topUp.AuthorizedByUser is not
                                      null ? topUp.AuthorizedByUser : "N/A")</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@topUp.Type</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">$@topUp.Amount</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      <span
                        class="text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full 
                                                                                                                      @(topUp.Status.Equals("PENDIENTE") ? "bg-yellow-100 text-yellow-800" : topUp.Status.Equals("APROBADO") ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800") ">
                        @topUp.Status
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@topUp.AuditableDate.ToString("dd/MM/yyyy")
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 flex justify-center items-center">
                      <img src="@(topUp.Receipt is not null ? topUp.Receipt : "/Assets/Images/noImage.webp")"
                        alt="Comprobante de la recarga"
                        class="w-12 h-12 cursor-pointer hover:opacity-75 transition-opacity duration-200 border border-gray-300 rounded"
                        @onclick="() => OpenImageModal(topUp.Receipt, topUp.TargetUser, topUp.AuditableDate)">
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      <button @onclick='() => OnAproveTopUp(topUp, "APROBADO")'
                        disabled="@(!topUp.Status.Equals("PENDIENTE"))"
                        class="text-white text-sm font-bold px-3 py-2 rounded-lg transition duration-300 cursor-pointer
                                                                                                                                                     bg-green-500 hover:bg-green-600
                                                                                                                                                     disabled:bg-gray-300 disabled:cursor-not-allowed">
                        <i class="fa-solid fa-check"></i>
                      </button>

                      <button @onclick='() => OnAproveTopUp(topUp, "RECHAZADO")'
                        disabled="@(!topUp.Status.Equals("PENDIENTE"))"
                        class="text-white text-sm font-bold px-3 py-2 rounded-lg transition duration-300 cursor-pointer
                                                                                                                                                         bg-red-500 hover:bg-red-700
                                                                                                                                                         disabled:bg-gray-300 disabled:cursor-not-allowed">
                        <i class="fa-solid fa-xmark"></i>
                      </button>
                    </td>
                  </tr>
                }
              </tbody>
            </table>
          </div>
          <!-- Vista de tarjetas para mÃ³vil -->
          <div class="block md:hidden space-y-4 px-4">
            @foreach (var (topUp, index) in topUps!.Select((p, i) => (p, i)))
            {
              <div class="bg-white rounded-lg shadow-md border border-gray-200 p-4">
                <!-- Header con usuario y nÃºmero -->
                <div class="flex justify-between items-start mb-3">
                  <div>
                    <h3 class="font-bold text-gray-900">@topUp.TargetUser</h3>
                    <span class="text-xs text-gray-500">#@((currentPage - 1) * pageSize + index + 1)</span>
                  </div>
                  <span class="text-xs font-medium px-2.5 py-0.5 rounded-full 
                          @(topUp.Status.Equals("PENDIENTE") ? "bg-yellow-100 text-yellow-800" :
                                              topUp.Status.Equals("APROBADO") ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                    @topUp.Status
                  </span>
                </div>

                <!-- InformaciÃ³n principal -->
                <div class="grid grid-cols-2 gap-3 mb-3 text-sm">
                  <div>
                    <div class="text-gray-500">Monto</div>
                    <div class="font-semibold text-green-600">$@topUp.Amount</div>
                  </div>
                  <div>
                    <div class="text-gray-500">Tipo</div>
                    <div class="font-medium">@topUp.Type</div>
                  </div>
                  <div>
                    <div class="text-gray-500">Fecha</div>
                    <div>@topUp.AuditableDate.ToString("dd/MM/yyyy")</div>
                  </div>
                  <div>
                    <div class="text-gray-500">Creado por</div>
                    <div class="truncate">@topUp.RequestedByUser</div>
                  </div>
                </div>

                <!-- Aprobado por -->
                @if (!string.IsNullOrEmpty(topUp.AuthorizedByUser))
                {
                  <div class="mb-3 text-sm">
                    <div class="text-gray-500">Aprobado por</div>
                    <div class="truncate">@topUp.AuthorizedByUser</div>
                  </div>
                }

                <!-- Comprobante -->
                <div class="flex items-center justify-between mb-4">
                  <span class="text-sm text-gray-500">Comprobante:</span>
                  <img src="@(topUp.Receipt ?? "/Assets/Images/noImage.webp")" alt="Comprobante"
                    class="w-12 h-12 cursor-pointer hover:opacity-75 transition-opacity border border-gray-300 rounded"
                    @onclick="() => OpenImageModal(topUp.Receipt, topUp.TargetUser, topUp.AuditableDate)">
                </div>

                <!-- Acciones -->
                <div class="flex gap-2 justify-end">
                  <button @onclick='() => OnAproveTopUp(topUp, "APROBADO")' disabled="@(!topUp.Status.Equals("PENDIENTE"))"
                    class="text-white text-sm font-bold px-3 py-2 rounded-lg transition duration-300
                                       bg-green-500 hover:bg-green-600 disabled:bg-gray-300 disabled:cursor-not-allowed">
                    <i class="fa-solid fa-check"></i>
                  </button>
                  <button @onclick='() => OnAproveTopUp(topUp, "RECHAZADO")' disabled="@(!topUp.Status.Equals("PENDIENTE"))"
                    class="text-white text-sm font-bold px-3 py-2 rounded-lg transition duration-300
                                       bg-red-500 hover:bg-red-700 disabled:bg-gray-300 disabled:cursor-not-allowed">
                    <i class="fa-solid fa-xmark"></i>
                  </button>
                </div>
              </div>
            }
          </div>
        }
      </div>
    </section>
  }
</div>

<!-- Modal para mostrar imagen del comprobante -->
@if (showImageModal)
{
  <div class="fixed inset-0 bg-black/50 bg-opacity-50 flex items-center justify-center z-50" @onclick="CloseImageModal">
    <div class="bg-white rounded-lg shadow-xl max-w-4xl max-h-[90vh] overflow-hidden" @onclick:stopPropagation="true">
      <div class="bg-gray-100 px-6 py-4 border-b flex justify-between items-center">
        <div>
          <h3 class="text-lg font-semibold text-gray-900">Comprobante de Recarga</h3>
          <p class="text-sm text-gray-600">Usuario: @selectedImageUser</p>
          <p class="text-sm text-gray-600">Fecha: @selectedImageDate?.ToString("dd/MM/yyyy HH:mm")</p>
        </div>
        <button @onclick="CloseImageModal" class="text-gray-400 hover:text-gray-600 transition-colors">
          <i class="fa-solid fa-times text-xl"></i>
        </button>
      </div>
      <div class="p-6 flex justify-center items-center">
        <div class="max-w-full max-h-[60vh] overflow-auto">
          @if (!string.IsNullOrEmpty(selectedImageUrl) && selectedImageUrl != "/Assets/Images/noImage.webp")
          {
            <img src="@selectedImageUrl" alt="Comprobante de recarga" class="max-w-full h-auto shadow-lg rounded"
              style="max-height: 60vh; object-fit: contain;">
          }
          else
          {
            <div class="flex flex-col items-center justify-center py-12 text-gray-500">
              <i class="fa-solid fa-image text-6xl mb-4"></i>
              <p class="text-lg">No hay comprobante disponible</p>
            </div>
          }
        </div>
      </div>
      <div class="bg-gray-100 px-6 py-3 border-t flex justify-end">
        <button @onclick="CloseImageModal"
          class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors">
          Cerrar
        </button>
      </div>
    </div>
  </div>
}

@code
{
  private IEnumerable<TopUpRequestResponseDto>? topUps;
  private TopUpRequestUpdateDto topUpUpdateDto = new TopUpRequestUpdateDto();
  private string? errorMessage;
  private string? serverMessage;
  private int currentPage = 1;
  private int pageSize = 5;
  private int totalPages = 1;

  // Variables para el modal de imagen
  private bool showImageModal = false;
  private string? selectedImageUrl;
  private string? selectedImageUser;
  private DateTime? selectedImageDate;
  private string? filtroTipo;
  private string? filtroEstado;
  private string? filtroUsuario;
  private string? filtroAutorizado;
  private DateTime? filtroFechaInicio;
  private DateTime? filtroFechaFin;
  private FilterContainer? filterContainerRef;


  protected override async Task OnInitializedAsync()
  {
    await LoadTopUpsAsync();
  }
  private async Task LoadTopUpsAsync()
  {
    var query = new AdminTopUpRequestQueryParams
    {
      PageNumber = currentPage,
      PageSize = pageSize,
      Type = string.IsNullOrWhiteSpace(filtroTipo) ? null : filtroTipo,
      Status = string.IsNullOrWhiteSpace(filtroEstado) ? null : filtroEstado,
      TargetUser = string.IsNullOrWhiteSpace(filtroUsuario) ? null : filtroUsuario,
      AuthorizedByUser = string.IsNullOrWhiteSpace(filtroAutorizado) ? null : filtroAutorizado,
      StartDate = filtroFechaInicio,
      EndDate = filtroFechaFin
    };

    var response = await _userService.GetAllTopUpRequestsAsync(query);

    if (response.data is null)
    {
      errorMessage = response.message;
      topUps = null;
      totalPages = 1;
    }
    else
    {
      topUps = response.data.Items;
      var totalRecords = response.totalRecords > 0 ? response.totalRecords : response.data.TotalItems;
      totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
      errorMessage = null;
    }

    StateHasChanged();
  }


  private async Task OnAproveTopUp(TopUpRequestResponseDto topUp, string status)
  {
    var token = await _localStorage.GetItemAsync<string>("token");
    if (token is null)
    {
      Nav.NavigateTo("/Login");
      return;
    }
    var approveById = JwtHelper.GetClaim(token, ClaimTypes.NameIdentifier);
    topUpUpdateDto.Id = topUp.Id;
    topUpUpdateDto.AuthorizedByUserId = approveById;
    topUpUpdateDto.Status = status;

    var response = await _userService.AproveOrRejectTopUpAsync(topUpUpdateDto);
    serverMessage = response.message;
    if (response.data is null)
    {
      await _sw.FireAsync("Error", serverMessage, SweetAlertIcon.Error);
      return;
    }
    if (status == "APROBADO")
    {
      await _sw.FireAsync("Solicitud aprobada", serverMessage, SweetAlertIcon.Success);
    }
    else
    {
      await _sw.FireAsync("Solicitud rechazada", serverMessage, SweetAlertIcon.Success);
    }
    await OnInitializedAsync();
  }

  private async Task GoToPage(int page)
  {
    if (page < 1 || page > totalPages) return;
    currentPage = page;
    await LoadTopUpsAsync();
  }


  // MÃ©todos para el modal de imagen
  private void OpenImageModal(string? imageUrl, string? userName, DateTime date)
  {
    selectedImageUrl = imageUrl;
    selectedImageUser = userName;
    selectedImageDate = date;
    showImageModal = true;
  }

  private void CloseImageModal()
  {
    showImageModal = false;
    selectedImageUrl = null;
    selectedImageUser = null;
    selectedImageDate = null;
  }

  private async Task LimpiarFiltros()
  {
    filtroTipo = null;
    filtroEstado = null;
    filtroUsuario = null;
    filtroAutorizado = null;
    filtroFechaInicio = null;
    filtroFechaFin = null;
    currentPage = 1;
    await LoadTopUpsAsync();
  }
}