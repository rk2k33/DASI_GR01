@page "/recuperar-contrasena"
@layout NoLayout
@attribute [AllowAnonymous]
@inject NavigationManager Navigation
@inject SweetAlertService _sw
@inject IAuthService _authService

<PageTitle>Recuperar Contraseña | SS.CC.</PageTitle>
<div
  class="w-full min-h-screen flex items-center justify-center bg-cover bg-center bg-[url('/Assets/Images/ScoutsBackground.webp')] overflow-y-auto">

  <section class="w-full flex flex-col justify-center items-center space-y-4 p-2 sm:p-5 md:p-10 lg:p-20 z-10">
    <div
      class="space-y-4 w-full sm:w-3/4 md:w-1/2 backdrop-blur-sm bg-white/50 border border-white/30 rounded-2xl shadow-2xl p-10 flex flex-col items-center justify-center">
      <section class="flex flex-col w-full justify-center items-center">
        <div class="p-2 flex gap-4 justify-center items-center">
          <img src="/Assets/Images/mapache.webp" alt="mapache scout SSCC" class="w-auto h-[120px]">
          <div class="text-center">
            <div class="flex flex-col">
              <span class="text-sm font-bold text-[#0e5c25]">Grupo Scout #18</span>
              <span class="text-sm font-bold text-[#2b4266]">SS.CC.</span>
              <span class="text-2xl font-bold text-[#1C328C]">Rumipamba</span>
            </div>
            <span class="text-gray-400/90 text-sm font-bold">Activa tu cuenta</span>
          </div>
        </div>
      </section>
      @if (recoverPassDto is null)
      {
        <h2 class="text-lg sm:text-2xl font-bold text-green-800">Cargando...</h2>
      }
      else
      {
        <h2 class="text-lg sm:text-2xl font-bold text-green-800">¡Bienvenido @Email! Restablece tu contraseña</h2>
        <p class="text-blue-700 text-xs sm:text-md font-semibold w-3/4 text-center">
          Para recuperar tu contraseña, elige una nueva contraseña y acceder de nuevo a tu cuenta, la contraseña debe
          tener mínimo 8 caracteres, una letra mayúscula, una letra minúscula, un numero y un carácter especial.
        </p>
        <EditForm model="recoverPassDto" OnValidSubmit="HandleSubmit"
          class="mt-6 space-y-8 w-full flex flex-col justify-center items-center">
          <DataAnnotationsValidator />
          <div class="w-full sm:w-3/4 lg:w-1/2 relative">
            <FloatingLabelInput Label="Nueva Contraseña" Name="Newpassword" Type="password" LabelColor="indigo"
              Value=@recoverPassDto.NewPassword
              OnChange="(e) => recoverPassDto.NewPassword = e.Value?.ToString() ?? string.Empty">
            </FloatingLabelInput>
            <ValidationMessage For="@(() => recoverPassDto.NewPassword)" />
          </div>
          <div class="w-full sm:w-3/4 lg:w-1/2">
            <FloatingLabelInput Label="Confirmar Contraseña" Name="Confirmpassword" Type="password" LabelColor="indigo"
              Value=@recoverPassDto.ConfirmNewPassword
              OnChange="(e) => recoverPassDto.ConfirmNewPassword = e.Value?.ToString() ?? string.Empty">
            </FloatingLabelInput>
            <ValidationMessage For="@(() => recoverPassDto.ConfirmNewPassword)" />
          </div>
          <button type="submit"
            class="bg-green-700 hover:bg-green-500 text-white font-bold py-3 px-5 rounded-xl border border-white/30 transition duration-200 cursor-pointer">
            Cambiar Contraseña
          </button>
        </EditForm>
      }
    </div>
  </section>
</div>

@code
{
  [Parameter]
  [SupplyParameterFromQuery(Name = "token")]
  public string? Token { get; set; }

  [Parameter]
  [SupplyParameterFromQuery(Name = "email")]
  public string? Email { get; set; }
  public RecoverPassDto recoverPassDto { get; set; } = default!;

  protected override void OnInitialized()
  {
    if (string.IsNullOrWhiteSpace(Token) || string.IsNullOrWhiteSpace(Email))
    {
      Navigation.NavigateTo("/login", true);
      return;
    }
    recoverPassDto = new RecoverPassDto
    {
      Token = Token,
      Email = Email
    };
  }

  private async Task HandleSubmit()
  {
    if (recoverPassDto.NewPassword != recoverPassDto.ConfirmNewPassword)
    {
      await _sw.FireAsync("Error", "Las contraseñas no coinciden.", SweetAlertIcon.Error);
      return;
    }
    var response = await _authService.ResetPasswordAsync(recoverPassDto);
    if (!response.data)
    {
      await _sw.FireAsync("Error", response.message, SweetAlertIcon.Error);
      return;
    }
    await _sw.FireAsync("Éxito", response.message, SweetAlertIcon.Success);
    Navigation.NavigateTo("/login", true);
  }
}
