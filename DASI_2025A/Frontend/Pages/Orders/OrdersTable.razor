@attribute [Authorize(Roles = "Superadmin, Admin")]
@page "/Ordenes"
@using System.Security.Claims;
@inject NavigationManager Nav
@inject SweetAlertService _sw
@inject IOrderService _orderService

<PageTitle>Ordenes</PageTitle>
<div class="w-full">
  <BodyHeader title="Ordenes" />
  <section class="w-full flex justify-between items-center px-4">
    <h1 class="text-4xl font-bold text-[#427500]">Ordenes</h1>
    <div class="flex gap-4">
      <NavLink href="/Ordenes/Realizar_Orden"
        class="hover:bg-green-600 bg-green-800  text-white text-lg font-bold px-4 py-2 rounded-full w-10 h-10 flex justify-center items-center transition duration-300 cursor-pointer">
        <i class="fa-solid fa-plus"></i>
      </NavLink>
    </div>
  </section>
  @if (orders == null && string.IsNullOrEmpty(errorMessage))
  {
    <h1 class="text-sm font-bold text-[#427500]">Cargando...</h1>
  }
  else
  {

    <section>
      <div class="p-2">
        <FilterContainer @ref="filterContainerRef">
          <h3 class="block md:hidden text-2xl font-bold text-[#427500]"><strong>Filtrar Ordenes</strong></h3>
          <div class="grid grid-cols-1 space-y-4 md:grid-cols-4 gap-4">
            <FloatingLabelInput Label="Vendedor" Name="seller" Type="text" LabelColor="blue" value="@filtroSeller"
              OnChange="(e) => filtroSeller = e.Value?.ToString()" />

            <FloatingLabelInput Label="Comprador" Name="buyer" Type="text" LabelColor="blue" value="@filtroBuyer"
              OnChange="(e) => filtroBuyer = e.Value?.ToString()" />

            <FloatingLabelInput Label="Desde" Name="start" Type="date" LabelColor="blue"
              value="@(filtroDesde?.ToString("yyyy-MM-dd"))"
              OnChange="(e) => filtroDesde = string.IsNullOrWhiteSpace(e.Value?.ToString()) ? null : DateTime.Parse(e.Value!.ToString()!)" />

            <FloatingLabelInput Label="Hasta" Name="end" Type="date" LabelColor="blue"
              value="@(filtroHasta?.ToString("yyyy-MM-dd"))"
              OnChange="(e) => filtroHasta = string.IsNullOrWhiteSpace(e.Value?.ToString()) ? null : DateTime.Parse(e.Value!.ToString()!)" />
          </div>
          <div class="flex justify-end md:justify-start gap-2 mt-4">
            <button class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded cursor-pointer"
              @onclick="async () => { currentPage = 1; await LoadOrdersAsync(); filterContainerRef?.CerrarModal(); }">
              Buscar
            </button>
            <button class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded cursor-pointer"
              @onclick="async () => { await LimpiarFiltros(); filterContainerRef?.CerrarModal(); }">
              Limpiar
            </button>
          </div>
        </FilterContainer>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
          <h1 class="text-sm font-bold text-[#427500]">@errorMessage</h1>
        }
        else
        {
          <div class="flex justify-end w-full px-6 py-2">
            <nav class="inline-flex space-x-1">
              <button @onclick="() => GoToPage(currentPage - 1)"
                class="w-7 h-7 rounded-full font-bold text-black flex justify-center items-center hover:bg-green-800/70 hover:text-white cursor-pointer transition duration-300"
                disabled="@(@currentPage == 1)"><i class="fa-solid fa-chevron-left"></i></button>

              @for (int i = 1; i <= totalPages; i++)
              {
                <button @onclick="() => GoToPage(i)"
                  class="w-7 h-7 font-bold text-center rounded-full @(i == currentPage ? "bg-blue-500/80 text-white" : "bg-white hover:bg-gray-300/80 cursor-pointer") text-xs">
                  @i
                </button>
              }
              <button @onclick="() => GoToPage(currentPage + 1)"
                class="w-7 h-7 rounded-full font-bold text-black flex justify-center items-center hover:bg-green-800/70 hover:text-white cursor-pointer transition duration-300"
                disabled="@(@currentPage == totalPages)"><i class="fa-solid fa-chevron-right"></i></button>
            </nav>
          </div>
          <!-- Tabla visibles solo en pantallas grandes -->
          <div class="hidden md:block overflow-x-auto rounded-lg shadow-2xl">
            <table class="w-full">
              <thead class="bg-gray-200 font-bold">
                @{
                  var headers = new List<string> { "Vendedor", "Comprador", "Monto", "Fecha", "Detalle" };
                }
                <tr>
                  <th class="w-5">#</th>
                  @foreach (var header in headers)
                  {
                    <th class="px-6 py-3 text-left text-sm uppercase tracking-wider">@header</th>
                  }
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                @foreach (var (order, index) in orders!.Select((o, i) => (o, i)))
                {

                  <tr class="hover:bg-gray-50 transition-colors duration-150">
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@((currentPage - 1) * pageSize + index + 1)
                    </td>
                    <td class="px-6 py-4 whitespace-normal break-words text-sm text-gray-500">@order.SellerFullName</td>
                    <td class="px-6 py-4 whitespace-normal break-words text-sm text-gray-500">@order.BuyerFullName</td>
                    <td class="px-6 py-4 whitespace-normal break-words text-sm text-gray-500">$@order.Total.ToString("0.00")
                    </td>
                    <td class="px-6 py-4 whitespace-normal break-words text-sm text-gray-500">
                      @order.CreatedAt.ToString("dd/MM/yyyy")
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <button @onclick="() => VerDetalle(order)"
                        class="hover:bg-blue-600 bg-blue-500 text-white text-sm font-bold px-3 py-2 rounded-lg transition duration-300 cursor-pointer">
                        <i class="fa-solid fa-eye"></i>
                      </button>
                    </td>
                  </tr>
                }
              </tbody>
            </table>
          </div>
          <!-- Tarjetas visibles solo en pantallas pequeÃ±as -->
          <div class="block md:hidden space-y-4 mt-4">
            @foreach (var (order, index) in orders!.Select((o, i) => (o, i)))
            {
              <div @key="order.Id" class="bg-white shadow-lg rounded-lg p-4 border border-gray-200">
                <div class="flex justify-between items-center mb-2">
                  <h2 class="text-lg font-bold text-[#427500]">Orden #@((currentPage - 1) * pageSize + index + 1)</h2>
                  <span class="text-sm text-gray-500">@order.CreatedAt.ToString("dd/MM/yyyy")</span>
                </div>
                <div class="text-sm space-y-1 text-gray-700">
                  <div><strong>Vendedor:</strong> @order.SellerFullName</div>
                  <div><strong>Comprador:</strong> @order.BuyerFullName</div>
                  <div><strong>Monto:</strong> <span class="text-green-600">$@order.Total.ToString("0.00")</span></div>
                </div>
                <div class="text-sm space-y-1 text-gray-700">
                  <button @onclick="() => VerDetalle(order)"
                    class="hover:bg-blue-600 bg-blue-500 text-white text-sm font-bold px-3 py-2 rounded-lg transition duration-300 cursor-pointer flex gap-2">
                    <i class="fa-solid fa-eye"></i>
                    <span class="ml-2">Ver Detalle</span>
                  </button>
                </div>

              </div>
            }
          </div>
        }

      </div>
    </section>
  }
</div>
@if (ordenSeleccionada != null)
{
  <div class="fixed inset-0 bg-black/50 bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg shadow-lg max-w-2xl w-full p-6 relative">
      <button @onclick="CerrarModalDetalle"
        class=" cursor-pointer absolute top-2 right-2 text-gray-500 hover:text-red-600 text-lg">
        <i class="fa-solid fa-xmark"></i>
      </button>

      <h2 class="text-2xl font-bold text-[#427500] mb-4">Detalle de la Orden</h2>

      <div class="space-y-2 text-sm">
        <p><strong>Vendedor:</strong> @ordenSeleccionada.SellerFullName</p>
        <p><strong>Comprador:</strong> @ordenSeleccionada.BuyerFullName</p>

        <p><strong>Fecha:</strong> @ordenSeleccionada.CreatedAt.ToString("dd/MM/yyyy")</p>

        <h4 class="font-bold mt-4 text-[#427500]">Productos:</h4>
        <table class="w-full text-sm mt-2 border border-gray-200 rounded">
          <thead class="bg-gray-100">
            <tr>
              <th class="text-left px-2 py-1 border">Producto</th>
              <th class="text-left px-2 py-1 border">Cantidad</th>
              <th class="text-left px-2 py-1 border">Precio</th>
              <th class="text-left px-2 py-1 border">Subtotal</th>
            </tr>
          </thead>
          <tbody>
            @foreach (var detalle in ordenSeleccionada.OrderDetails)
            {
              <tr>
                <td class="px-2 py-1 border">@detalle.ProductName</td>
                <td class="px-2 py-1 border">@detalle.Quantity</td>
                <td class="px-2 py-1 border">$@detalle.UnitPrice.ToString("0.00")</td>
                <td class="px-2 py-1 border">$@detalle.Subtotal.ToString("0.00")</td>
              </tr>
            }
          </tbody>
        </table>
      </div>
      <div class="flex justify-end p-5">
        <p><strong>Total:</strong> <span
            class=" font-bold text-green-600">$@ordenSeleccionada.Total.ToString("0.00")</span></p>
      </div>


      <div class="mt-4 flex justify-end">
        <button @onclick="CerrarModalDetalle"
          class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded cursor-pointer">
          Cerrar
        </button>
      </div>
    </div>
  </div>
}


@code
{
  private IEnumerable<OrderResponseDto>? orders;
  private string? errorMessage;
  private int currentPage = 1;
  private int pageSize = 5;
  private int totalPages = 1;

  private string? filtroBuyer;
  private string? filtroSeller;
  private DateTime? filtroDesde;
  private DateTime? filtroHasta;
  private FilterContainer? filterContainerRef;

  private OrderResponseDto? ordenSeleccionada;

  protected override async Task OnInitializedAsync()
  {
    await LoadOrdersAsync();
  }

  private async Task LoadOrdersAsync()
  {
    var queryParams = new OrderQueryParams
    {
      PageNumber = currentPage,
      PageSize = pageSize,
      BuyerFullName = string.IsNullOrWhiteSpace(filtroBuyer) ? null : filtroBuyer,
      SellerFullName = string.IsNullOrWhiteSpace(filtroSeller) ? null : filtroSeller,
      StartDate = filtroDesde,
      EndDate = filtroHasta
    };

    var response = await _orderService.GetAllOrdersAsync(queryParams);

    if (response.data == null)
    {
      errorMessage = response.message;
      orders = null;
      totalPages = 1;
    }
    else
    {
      orders = response.data.Items;
      var totalRecords = response.totalRecords > 0 ? response.totalRecords : response.data.TotalItems;
      totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
      errorMessage = null;
    }

    StateHasChanged();
  }
  private async Task GoToPage(int page)
  {
    if (page < 1 || page > totalPages) return;
    currentPage = page;
    await LoadOrdersAsync();
  }

  private async Task LimpiarFiltros()
  {
    filtroBuyer = null;
    filtroSeller = null;
    filtroDesde = null;
    filtroHasta = null;
    currentPage = 1;
    await LoadOrdersAsync();
  }
  private void VerDetalle(OrderResponseDto orden)
  {
    ordenSeleccionada = orden;
  }

  private void CerrarModalDetalle()
  {
    ordenSeleccionada = null;
  }
}