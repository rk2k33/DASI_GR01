@attribute [Authorize(Roles = "Superadmin, Admin")]
@page "/Ordenes"
@using System.Security.Claims;
@inject NavigationManager Nav
@inject SweetAlertService _sw
@inject IOrderService _orderService

<title>Ordenes</title>
<div class="w-full">
  <BodyHeader title="Ordenes" />
  <section class="w-full flex justify-between items-center px-4">
    <h1 class="text-4xl font-bold text-[#427500]">Ordenes</h1>
    <div class="flex gap-4">
      <NavLink href="/Ordenes/Realizar_Orden"
        class="hover:bg-green-600 bg-green-800  text-white text-lg font-bold px-4 py-2 rounded-full w-10 h-10 flex justify-center items-center transition duration-300 cursor-pointer">
        <i class="fa-solid fa-plus"></i>
      </NavLink>
    </div>
  </section>
  @if (orders == null && string.IsNullOrEmpty(errorMessage))
  {
    <h1 class="text-sm font-bold text-[#427500]">Cargando...</h1>
  }
  else if (!string.IsNullOrEmpty(errorMessage))
  {
    <h1 class="text-sm font-bold text-[#427500]">@errorMessage</h1>
  }
  else
  {
    <section>
      <div class="p-2">
        <div class="flex justify-end w-full px-6 py-2">
          <nav class="inline-flex space-x-1">
            <button @onclick="() => GoToPage(currentPage - 1)"
              class="w-7 h-7 rounded-full font-bold text-black flex justify-center items-center hover:bg-green-800/70 hover:text-white cursor-pointer transition duration-300"
              disabled="@(@currentPage == 1)"><i class="fa-solid fa-chevron-left"></i></button>

            @for (int i = 1; i <= totalPages; i++)
            {
              <button @onclick="() => GoToPage(i)"
                class="w-7 h-7 font-bold text-center rounded-full @(i == currentPage ? "bg-blue-500/80 text-white" : "bg-white hover:bg-gray-300/80 cursor-pointer") text-xs">
                @i
              </button>
            }
            <button @onclick="() => GoToPage(currentPage + 1)"
              class="w-7 h-7 rounded-full font-bold text-black flex justify-center items-center hover:bg-green-800/70 hover:text-white cursor-pointer transition duration-300"
              disabled="@(@currentPage == totalPages)"><i class="fa-solid fa-chevron-right"></i></button>
          </nav>
        </div>
        <div class="overflow-x-auto rounded-lg shadow-2xl">
          <table class="w-full">
            <thead class="bg-gray-200 font-bold">
              @{
                var headers = new List<string> { "Vendedor", "Comprador", "Monto", "Fecha" };
              }
              <tr>
                <th class="w-5">#</th>
                @foreach (var header in headers)
                {
                  <th class="px-6 py-3 text-left text-sm uppercase tracking-wider">@header</th>
                }
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              @foreach (var (order, index) in pagedOrders.Select((p, i) => (p, i)))
              {

                <tr class="hover:bg-gray-50 transition-colors duration-150">
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@((currentPage - 1) * pageSize + index + 1)
                  </td>
                  <td class="px-6 py-4 whitespace-normal break-words text-sm text-gray-500">@order.SellerFullName</td>
                  <td class="px-6 py-4 whitespace-normal break-words text-sm text-gray-500">@order.BuyerFullName</td>
                  <td class="px-6 py-4 whitespace-normal break-words text-sm text-gray-500">$@order.Total.ToString("0.00")
                  </td>
                  <td class="px-6 py-4 whitespace-normal break-words text-sm text-gray-500">
                    @order.CreatedAt.ToString("dd/MM/yyyy")</td>
                </tr>
              }
            </tbody>
          </table>
        </div>
      </div>
    </section>
  }
</div>

@code
{
  private IEnumerable<OrderResponseDto>? orders;
  private string? errorMessage;
  private string? serverMessage;
  private int currentPage = 1;
  private int pageSize = 5;
  private int totalPages = 1;
  private IEnumerable<OrderResponseDto> pagedOrders =>
  orders?.Skip((currentPage - 1) * pageSize).Take(pageSize) ?? Enumerable.Empty<OrderResponseDto>();

  protected override async Task OnInitializedAsync()
  {
    var response = await _orderService.GetAllOrdersAsync();
    if (response.data is null)
    {
      errorMessage = response.message;
    }
    else
    {
      orders = response.data;
      totalPages = (int)Math.Ceiling((double)orders.Count() / pageSize);
    }
  }

  private void GoToPage(int page)
  {
    if (page < 1 || page > totalPages) return;
    currentPage = page;
  }
}