@namespace Frontend.Components
@using Microsoft.AspNetCore.Components.Web
@inject IUsersService _userService

<section class="w-full flex justify-between items-center px-4 mb-2">
	<h1 class="text-4xl font-bold text-[#427500]">Escoger Usuario</h1>
</section>



@if (users == null && string.IsNullOrEmpty(errorMessage))
{
	<h1 class="text-sm font-bold text-[#427500]">Cargando...</h1>
}
else
{
	<section>
		<div class="p-2">
			<FilterContainer @ref="filterContainerRef">
				<h3 class="block md:hidden text-2xl font-bold text-[#427500]"><strong>Filtrar Usuarios</strong></h3>
				<div class="grid grid-cols-1 space-y-4 md:grid-cols-4 gap-4">
					<FloatingLabelInput Label="Nombre" Name="nombre" Type="text" LabelColor="blue" value="@filtroNombre"
						OnChange="(e) => filtroNombre = e.Value?.ToString()" />
					<FloatingLabelInput Label="Buscar por correo" Name="correo" Type="text" LabelColor="blue" value="@filtroEmail"
						OnChange="(e) => filtroEmail = e.Value?.ToString()" />
				</div>
				<div class="flex justify-end md:justify-start gap-2 mt-4">
					<button class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded cursor-pointer"
						@onclick="async () => { currentPage = 1; await LoadUsersAsync(); filterContainerRef?.CerrarModal(); }">
						Buscar
					</button>
					<button class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded cursor-pointer"
						@onclick="async () => { await LimpiarFiltros(); filterContainerRef?.CerrarModal(); }">
						Limpiar
					</button>
				</div>
			</FilterContainer>
			@if (!string.IsNullOrEmpty(errorMessage))
			{
				<h1 class="text-sm font-bold text-[#427500]">@errorMessage</h1>
			}
			else
			{
				<div class="flex justify-end w-full px-6 py-2">
					<nav class="inline-flex space-x-1">
						<button @onclick="async () => await GoToPage(currentPage - 1)"
							class="w-7 h-7 rounded-full font-bold text-black flex justify-center items-center hover:bg-green-800/70 hover:text-white cursor-pointer transition duration-300"
							disabled="@(@currentPage == 1)"><i class="fa-solid fa-chevron-left"></i>
						</button>
						@for (int i = 1; i <= totalPages; i++)
						{
							<button @onclick="async () => await GoToPage(i)"
								class="w-7 h-7 font-bold text-center rounded-full @(i == currentPage ? "bg-blue-500/80 text-white" : "bg-white hover:bg-gray-300/80 cursor-pointer") text-xs">
								@i
							</button>
						}
						<button @onclick="async () => await GoToPage(currentPage + 1)"
							class="w-7 h-7 rounded-full font-bold text-black flex justify-center items-center hover:bg-green-800/70 hover:text-white cursor-pointer transition duration-300"
							disabled="@(@currentPage == totalPages)"><i class="fa-solid fa-chevron-right"></i>
						</button>
					</nav>
				</div>
				<!-- Tabla visibles solo en pantallas grandes -->
				<div class="hidden md:block overflow-x-auto rounded-lg shadow-2xl">
					<table class="w-full">
						<thead class="bg-gray-200 font-bold">
							<tr>
								<th class="px-6 py-3 text-left text-sm uppercase tracking-wider">#</th>
								<th class="px-6 py-3 text-left text-sm uppercase tracking-wider">Nombre</th>
								<th class="px-6 py-3 text-left text-sm uppercase tracking-wider">Apellido</th>
								<th class="px-6 py-3 text-left text-sm uppercase tracking-wider">Correo</th>
								<th class="px-6 py-3 text-left text-sm uppercase tracking-wider">Acciones</th>
							</tr>
						</thead>
						<tbody class="bg-white divide-y divide-gray-200">
							@foreach (var (user, index) in users!.Select((u, i) => (u, i)))
							{
								<tr @key="user.Id"
									class="@(index % 2 == 0 ? "bg-white" : "bg-gray-100") hover:bg-gray-50 hover:cursor-pointer transition-colors duration-150">
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@((currentPage - 1) * pageSize + index + 1)
									</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@user.FirstName</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@user.LastName</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@user.Email</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
										<button @onclick="() => SelectUserAsync(user)"
											class="text-white font-bold py-2 px-4 text-xs rounded-2xl cursor-pointer gap-2 flex justify-center items-center @(SelectedUser?.Id == user.Id ? "bg-green-600" : "bg-blue-500 hover:bg-blue-700")">
											<span>@(SelectedUser?.Id == user.Id ? "Seleccionado" : "Seleccionar")</span>
										</button>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
				<!-- Tarjetas visibles solo en pantallas pequeñas -->
				<div class="block md:hidden space-y-4">
					@foreach (var (user, index) in users!.Select((u, i) => (u, i)))
					{
						<div @key="user.Id" class="bg-white shadow-lg rounded-lg p-4 border border-gray-200">
							<div class="flex justify-between items-center mb-2">
								<h2 class="text-lg font-bold text-[#427500]">@user.FirstName @user.LastName</h2>
							</div>
							<div class="text-sm space-y-1 text-gray-700">
								<div><strong>Email:</strong> @user.Email</div>
								<div>
									<strong>Balance:</strong>
									<span class="@(user.Balance >= 0 ? "text-green-600" : "text-red-600")">
										$@user.Balance.ToString("0.00")
									</span>
								</div>
							</div>
							<div class="mt-4 flex gap-2">
								<button @onclick="() => SelectUserAsync(user)"
									class="text-white font-bold py-2 px-4 text-xs rounded-2xl cursor-pointer gap-2 flex justify-center items-center @(SelectedUser?.Id == user.Id ? "bg-green-600" : "bg-blue-500 hover:bg-blue-700")">
									<span>@(SelectedUser?.Id == user.Id ? "Seleccionado" : "Seleccionar")</span>
								</button>
							</div>
						</div>
					}
				</div>
			}

		</div>
	</section>
}

@code
{
	[Parameter] public EventCallback<UserDto> OnUserSelected { get; set; }
	[Parameter] public UserDto? SelectedUser { get; set; }

	private IEnumerable<UserDto>? users;
	private string? errorMessage;
	private int currentPage = 1;
	private int pageSize = 5;
	private int totalPages = 1;
	private string? filtroNombre;
	private string? filtroEmail;
	private FilterContainer? filterContainerRef;

	protected override async Task OnInitializedAsync()
	{
		await LoadUsersAsync();
	}

	private async Task LoadUsersAsync()
	{
		var query = new UserQueryParams
		{
			PageNumber = currentPage,
			PageSize = pageSize,
			SearchName = string.IsNullOrWhiteSpace(filtroNombre) ? null : filtroNombre,
			SearchEmail = string.IsNullOrWhiteSpace(filtroEmail) ? null : filtroEmail
		};

		var response = await _userService.GetAllUsersAsync(query);

		if (response.data is null)
		{
			errorMessage = response.message;
			users = null;
			totalPages = 1;
		}
		else
		{
			users = response.data.Items.Where(u => u.Active).ToList();
			// Usar totalRecords en lugar de response.totalRecords si está disponible
			var totalRecords = response.totalRecords > 0 ? response.totalRecords : response.data.TotalItems;
			totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
			errorMessage = null;
		}
		StateHasChanged(); // Asegurar que la UI se actualice
	}

	private async Task GoToPage(int page)
	{
		if (page < 1 || page > totalPages) return;
		currentPage = page;
		await LoadUsersAsync();
		StateHasChanged(); // Forzar re-renderizado después de cargar los datos
	}

	private async Task LimpiarFiltros()
	{
		filtroNombre = null;
		filtroEmail = null;
		currentPage = 1;
		await LoadUsersAsync();
	}

	private async Task SelectUserAsync(UserDto user)
	{
		SelectedUser = user;
		StateHasChanged();
		if (OnUserSelected.HasDelegate)
		{
			await OnUserSelected.InvokeAsync(user);
		}
	}
}
